// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'services/store.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5734480712160315756),
      name: 'Node',
      lastPropertyId: const obx_int.IdUid(9, 6044424971685999167),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3609420518394727335),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 696118586686639294),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9076755665869167754),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 922462461085338622),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6161902437465017855),
            name: 'snapshotsTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1907572023540325182),
            name: 'snapshotID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8065018162181887276),
            name: 'modificationTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6044424971685999167),
            name: 'size',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3480043477491150079),
      name: 'SnapshotStore',
      lastPropertyId: const obx_int.IdUid(4, 3417866942745308881),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2025437476508099114),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1581803144817013017),
            name: 'snapshotID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3417866942745308881),
            name: 'path',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 6414176714550520157),
            name: 'nodes',
            targetId: const obx_int.IdUid(1, 5734480712160315756))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 3480043477491150079),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 6414176714550520157),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [3985636014253510616],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1300404110958551942,
        2475801554717342420,
        4451935207168779745,
        7143321217317096998,
        1147791461221417266
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Node: obx_int.EntityDefinition<Node>(
        model: _entities[0],
        toOneRelations: (Node object) => [],
        toManyRelations: (Node object) => {},
        getId: (Node object) => object.id,
        setId: (Node object, int id) {
          object.id = id;
        },
        objectToFB: (Node object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final pathOffset = fbb.writeString(object.path);
          final snapshotIDOffset = fbb.writeString(object.snapshotID);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, pathOffset);
          fbb.addInt64(5, object.snapshotsTime.millisecondsSinceEpoch);
          fbb.addOffset(6, snapshotIDOffset);
          fbb.addInt64(7, object.modificationTime.millisecondsSinceEpoch);
          fbb.addInt64(8, object.size);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sizeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final snapshotIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final snapshotsTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final modificationTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = Node(
              id: idParam,
              size: sizeParam,
              name: nameParam,
              type: typeParam,
              path: pathParam,
              snapshotID: snapshotIDParam,
              snapshotsTime: snapshotsTimeParam,
              modificationTime: modificationTimeParam);

          return object;
        }),
    SnapshotStore: obx_int.EntityDefinition<SnapshotStore>(
        model: _entities[1],
        toOneRelations: (SnapshotStore object) => [],
        toManyRelations: (SnapshotStore object) =>
            {obx_int.RelInfo<SnapshotStore>.toMany(1, object.id): object.nodes},
        getId: (SnapshotStore object) => object.id,
        setId: (SnapshotStore object, int id) {
          object.id = id;
        },
        objectToFB: (SnapshotStore object, fb.Builder fbb) {
          final snapshotIDOffset = fbb.writeString(object.snapshotID);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, snapshotIDOffset);
          fbb.addOffset(3, pathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final snapshotIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = SnapshotStore(
              id: idParam, snapshotID: snapshotIDParam, path: pathParam);
          obx_int.InternalToManyAccess.setRelInfo<SnapshotStore>(object.nodes,
              store, obx_int.RelInfo<SnapshotStore>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Node] entity fields to define ObjectBox queries.
class Node_ {
  /// See [Node.id].
  static final id = obx.QueryIntegerProperty<Node>(_entities[0].properties[0]);

  /// See [Node.name].
  static final name = obx.QueryStringProperty<Node>(_entities[0].properties[1]);

  /// See [Node.type].
  static final type = obx.QueryStringProperty<Node>(_entities[0].properties[2]);

  /// See [Node.path].
  static final path = obx.QueryStringProperty<Node>(_entities[0].properties[3]);

  /// See [Node.snapshotsTime].
  static final snapshotsTime =
      obx.QueryDateProperty<Node>(_entities[0].properties[4]);

  /// See [Node.snapshotID].
  static final snapshotID =
      obx.QueryStringProperty<Node>(_entities[0].properties[5]);

  /// See [Node.modificationTime].
  static final modificationTime =
      obx.QueryDateProperty<Node>(_entities[0].properties[6]);

  /// See [Node.size].
  static final size =
      obx.QueryIntegerProperty<Node>(_entities[0].properties[7]);
}

/// [SnapshotStore] entity fields to define ObjectBox queries.
class SnapshotStore_ {
  /// See [SnapshotStore.id].
  static final id =
      obx.QueryIntegerProperty<SnapshotStore>(_entities[1].properties[0]);

  /// See [SnapshotStore.snapshotID].
  static final snapshotID =
      obx.QueryStringProperty<SnapshotStore>(_entities[1].properties[1]);

  /// See [SnapshotStore.path].
  static final path =
      obx.QueryStringProperty<SnapshotStore>(_entities[1].properties[2]);

  /// see [SnapshotStore.nodes]
  static final nodes =
      obx.QueryRelationToMany<SnapshotStore, Node>(_entities[1].relations[0]);
}
