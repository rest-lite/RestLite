// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'views/backup_view/util.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5734480712160315756),
      name: 'Node',
      lastPropertyId: const IdUid(9, 6044424971685999167),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3609420518394727335),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 696118586686639294),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9076755665869167754),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 922462461085338622),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6161902437465017855),
            name: 'snapshotsTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1907572023540325182),
            name: 'snapshotID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8065018162181887276),
            name: 'modificationTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6044424971685999167),
            name: 'size',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3480043477491150079),
      name: 'SnapshotStore',
      lastPropertyId: const IdUid(4, 3417866942745308881),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2025437476508099114),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1581803144817013017),
            name: 'snapshotID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3417866942745308881),
            name: 'path',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6414176714550520157),
            name: 'nodes',
            targetId: const IdUid(1, 5734480712160315756))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 3480043477491150079),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(1, 6414176714550520157),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [3985636014253510616],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1300404110958551942,
        2475801554717342420,
        4451935207168779745,
        7143321217317096998,
        1147791461221417266
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Node: EntityDefinition<Node>(
        model: _entities[0],
        toOneRelations: (Node object) => [],
        toManyRelations: (Node object) => {},
        getId: (Node object) => object.id,
        setId: (Node object, int id) {
          object.id = id;
        },
        objectToFB: (Node object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final pathOffset = fbb.writeString(object.path);
          final snapshotIDOffset = fbb.writeString(object.snapshotID);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, pathOffset);
          fbb.addInt64(5, object.snapshotsTime.millisecondsSinceEpoch);
          fbb.addOffset(6, snapshotIDOffset);
          fbb.addInt64(7, object.modificationTime.millisecondsSinceEpoch);
          fbb.addInt64(8, object.size);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Node(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              size: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              snapshotID: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              snapshotsTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              modificationTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)));

          return object;
        }),
    SnapshotStore: EntityDefinition<SnapshotStore>(
        model: _entities[1],
        toOneRelations: (SnapshotStore object) => [],
        toManyRelations: (SnapshotStore object) =>
            {RelInfo<SnapshotStore>.toMany(1, object.id): object.nodes},
        getId: (SnapshotStore object) => object.id,
        setId: (SnapshotStore object, int id) {
          object.id = id;
        },
        objectToFB: (SnapshotStore object, fb.Builder fbb) {
          final snapshotIDOffset = fbb.writeString(object.snapshotID);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, snapshotIDOffset);
          fbb.addOffset(3, pathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SnapshotStore(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              snapshotID: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          InternalToManyAccess.setRelInfo(
              object.nodes,
              store,
              RelInfo<SnapshotStore>.toMany(1, object.id),
              store.box<SnapshotStore>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Node] entity fields to define ObjectBox queries.
class Node_ {
  /// see [Node.id]
  static final id = QueryIntegerProperty<Node>(_entities[0].properties[0]);

  /// see [Node.name]
  static final name = QueryStringProperty<Node>(_entities[0].properties[1]);

  /// see [Node.type]
  static final type = QueryStringProperty<Node>(_entities[0].properties[2]);

  /// see [Node.path]
  static final path = QueryStringProperty<Node>(_entities[0].properties[3]);

  /// see [Node.snapshotsTime]
  static final snapshotsTime =
      QueryIntegerProperty<Node>(_entities[0].properties[4]);

  /// see [Node.snapshotID]
  static final snapshotID =
      QueryStringProperty<Node>(_entities[0].properties[5]);

  /// see [Node.modificationTime]
  static final modificationTime =
      QueryIntegerProperty<Node>(_entities[0].properties[6]);

  /// see [Node.size]
  static final size = QueryIntegerProperty<Node>(_entities[0].properties[7]);
}

/// [SnapshotStore] entity fields to define ObjectBox queries.
class SnapshotStore_ {
  /// see [SnapshotStore.id]
  static final id =
      QueryIntegerProperty<SnapshotStore>(_entities[1].properties[0]);

  /// see [SnapshotStore.snapshotID]
  static final snapshotID =
      QueryStringProperty<SnapshotStore>(_entities[1].properties[1]);

  /// see [SnapshotStore.path]
  static final path =
      QueryStringProperty<SnapshotStore>(_entities[1].properties[2]);

  /// see [SnapshotStore.nodes]
  static final nodes =
      QueryRelationToMany<SnapshotStore, Node>(_entities[1].relations[0]);
}
